// Generated by CoffeeScript 1.9.2
var Stats, bxd_only;

Stats = (function() {
  function Stats(the_values) {
    this.the_values = the_values;
  }

  Stats.prototype.add_value = function(value) {
    return this.the_values.push(value);
  };

  Stats.prototype.n_of_samples = function() {
    return this.the_values.length;
  };

  Stats.prototype.sum = function() {
    var i, len, ref, total, value;
    total = 0;
    ref = this.the_values;
    for (i = 0, len = ref.length; i < len; i++) {
      value = ref[i];
      total += value;
    }
    return total;
  };

  Stats.prototype.mean = function() {
    return this.sum() / this.n_of_samples();
  };

  Stats.prototype.median = function() {
    var is_odd, median_position, the_values_sorted;
    is_odd = this.the_values.length % 2;
    median_position = Math.floor(this.the_values.length / 2);
    the_values_sorted = this.the_values.sort(function(a, b) {
      return a - b;
    });
    if (is_odd) {
      return the_values_sorted[median_position];
    } else {
      return (the_values_sorted[median_position] + the_values_sorted[median_position - 1]) / 2;
    }
  };

  Stats.prototype.std_dev = function() {
    var i, len, ref, step_a, step_b, sum, value;
    sum = 0;
    ref = this.the_values;
    for (i = 0, len = ref.length; i < len; i++) {
      value = ref[i];
      step_a = Math.pow(value - this.mean(), 2);
      sum += step_a;
    }
    step_b = sum / this.the_values.length;
    return Math.sqrt(step_b);
  };

  Stats.prototype.std_error = function() {
    return this.std_dev() / Math.sqrt(this.n_of_samples());
  };

  Stats.prototype.min = function() {
    return Math.min.apply(Math, this.the_values);
  };

  Stats.prototype.max = function() {
    return Math.max.apply(Math, this.the_values);
  };

  Stats.prototype.range = function() {
    return this.max() - this.min();
  };

  Stats.prototype.range_fold = function() {
    return Math.pow(2, this.range());
  };

  Stats.prototype.interquartile = function() {
    var iq, length, q1, q3;
    length = this.the_values.length;
    console.log("in interquartile the_values are:", this.the_values);
    console.log("length is:", length);
    q1 = this.the_values[Math.floor(length * .25)];
    q3 = this.the_values[Math.floor(length * .75)];
    iq = q3 - q1;
    return Math.pow(2, iq);
  };

  return Stats;

})();

bxd_only = new Stats([3, 5, 7, 8]);

console.log("[xred] bxd_only mean:", bxd_only.mean());

console.log("[xgreen] bxd_only median:", bxd_only.median());

console.log("[xpurple] bxd_only std_dev:", bxd_only.std_dev());

console.log("[xmagenta] bxd_only std_error:", bxd_only.std_error());

console.log("[xyellow] bxd_only min:", bxd_only.min());

window.Stats = Stats;

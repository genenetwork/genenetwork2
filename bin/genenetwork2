#! /bin/sh -e
#
# This is the startup script for GN2. It sets the environment variables to pick
# up a Guix profile and allows for overriding parameters.
#
# Typical usage
#
#   ./bin/genenetwork2 ~/my_settings.py
#
# This will run the GN2 server (with default settings if none
# supplied).
#
# To run a maintenance python script with settings (instead of the
# webserver) run from the base-dir with settings file and add that
# script with a -c switch, e.g.
#
#   env TMPDIR=/export/local/home/zas1024/gn2-zach/tmp WEBSERVER_MODE=DEBUG LOG_LEVEL=DEBUG SERVER_PORT=5002 GENENETWORK_FILES=/export/local/home/zas1024/gn2-zach/genotype_files SQL_URI=mysql://webqtlout:webqtlout@lily.uthsc.edu/db_webqtl ./bin/genenetwork2 ./etc/default_settings.py -c ./maintenance/gen_select_dataset.py
#
# To run any script in the environment
#
#   ./bin/genenetwork2 ./etc/default_settings.py -cli echo "HELLO WORLD"
#
# To get a python REPL(!)
#
#   ./bin/genenetwork2 ./etc/default_settings.py -cli python
#
# For development you may want to run
#
#   env WEBSERVER_MODE=DEBUG LOG_LEVEL=DEBUG ./bin/genenetwork2
#
# For staging and production we use gunicorn. Run with something like
# (note you have to provide the server port). Provide a settings file!
#
#   env SERVER_PORT=5003 ./bin/genenetwork2 ./etc/default_settings.py -gunicorn-prod
#
# For development use
#
#   env SERVER_PORT=5003 ./bin/genenetwork2 ./etc/default_settings.py -gunicorn-dev
#
# For extra flexibility you can also provide gunicorn parameters yourself with something like
#
#   ./bin/genenetwork2 ./etc/default_settings.py -gunicorn "--bind 0.0.0.0:5003 --workers=1 wsgi"

SCRIPT=$(realpath "$0")
echo SCRIPT=$SCRIPT
export GN2_PROFILE=$GUIX_ENVIRONMENT
echo GN2_PROFILE=$GN2_PROFILE
GN2_BASE_DIR=$(dirname $(dirname "$SCRIPT"))
GN2_ID=$(cat /etc/hostname):$(basename $GN2_BASE_DIR)

echo GN2_BASE_DIR=$GN2_BASE_DIR

GUIX_SITE=$GN2_BASE_DIR/lib/python3.8/site-packages
if [ -d $GUIX_SITE ]; then
    echo INFO: GN2 is running from GNU Guix
    GN2_BASE_DIR=$GUIX_SITE
    export GN_VERSION=$GN2_ID:$(cat $GN2_BASE_DIR/etc/VERSION)
else
    echo INFO: GN2 is running from a source tree
    GIT_HASH=$(git rev-parse HEAD)
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    export GN_VERSION="${GN2_ID}:$(cat ${GN2_BASE_DIR}/etc/VERSION)-${GIT_BRANCH}-$(echo ${GIT_HASH} | cut -c1-9)"
fi
echo GN_VERSION=$GN_VERSION

if [ "$1" = "-c" -o "$1" = "-gunicorn" ]; then
    echo "Can not use $1 switch without default settings file"
    exit 1
fi

settings=$1
if [ -z $settings ]; then
    settings=$GN2_BASE_DIR/etc/default_settings.py
else
    shift
fi
settings=$(realpath $settings)

# ext="${settings##*.}"
# if [ "$ext" = "json" -o "$ext" = "JSON" ]; then
#     overrides=$settings
# else
#     echo $settings
# fi

if [ ! -e $settings ]; then
    echo "ERROR: can not locate settings file - pass it in the command line"
    exit 1
fi

export GN2_SETTINGS=$settings     # Python
echo GN2_SETTINGS=$settings

export JS_GUIX_PATH=$GN2_PROFILE/share/genenetwork2/javascript
export LC_ALL=C # FIXME
export GUIX_GENENETWORK_FILES="$GN2_PROFILE/share/genenetwork2"
export PLINK_COMMAND="$GN2_PROFILE/bin/plink2"
export GEMMA_COMMAND="$GN2_PROFILE/bin/gemma"
if [ -z $GEMMA_WRAPPER_COMMAND ]; then
    export GEMMA_WRAPPER_COMMAND="$GN2_PROFILE/bin/gemma-wrapper"
fi

# Our UNIX TMPDIR defaults to /tmp - change this on a shared server
if [ -z $TMPDIR ]; then
    TMPDIR="/tmp"
fi

# Show environment settings
set|grep guix
set|grep $GN2_PROFILE
set|grep TMPDIR

# Now handle command parameter -c which runs python
if [ "$1" = '-c' ] ; then
    cd $GN2_BASE_DIR/wqflask
    cmd=${2#wqflask/}
    shift ; shift
    echo RUNNING COMMAND $cmd $*
    python $cmd $*
    exit $?
fi

# Now handle command parameter -cli which runs in bash
if [ "$1" = "-cli" ] ; then
    cd $GN2_BASE_DIR/wqflask
    cmd=$2
    shift ; shift
    echo RUNNING COMMAND $cmd $*
    $cmd $*
    exit $?
fi
if [ "$1" = '-gunicorn' ] ; then
    cd $GN2_BASE_DIR/wqflask
    cmd=$2
    echo RUNNING gunicorn $cmd
    gunicorn $cmd
    exit $?
fi
if [ "$1" = '-gunicorn-dev' ] ; then
    cd $GN2_BASE_DIR/wqflask
    if [ -z $SERVER_PORT ]; then echo "ERROR: Provide a SERVER_PORT" ; exit 1 ; fi
    cmd="--bind 0.0.0.0:$SERVER_PORT --workers=1 --timeout 180 --reload wsgi"
    echo RUNNING gunicorn $cmd
    gunicorn $cmd
    exit $?
fi
if [ "$1" = '-gunicorn-prod' ] ; then
    cd $GN2_BASE_DIR/wqflask
    if [ -z $SERVER_PORT ]; then echo "ERROR: Provide a SERVER_PORT" ; exit 1 ; fi
    PID=$TMPDIR/gunicorn.$USER.pid
    cmd="--bind 0.0.0.0:$SERVER_PORT --pid $PID --workers 20 --keep-alive 6000 --max-requests 100 --max-requests-jitter 30 --timeout 1200 wsgi"
    echo RUNNING gunicorn $cmd
    gunicorn $cmd
    exit $?
fi

echo "Starting the redis server:"
echo -n "dir $TMPDIR
dbfilename gn2.rdb
" | redis-server - &

# Start the flask server running GN2
cd $GN2_BASE_DIR/wqflask
echo "Starting with $settings"
python runserver.py
